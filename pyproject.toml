[project]
name = "pi_py"
version = "0.1.0"
description = "Python project for pi-day-2025-with-py"
authors = [
    {name = "Kevin McWhirter", email = "klmcw@yahoo.com"},
]
dependencies = [
    "sympy>=1.13.3",
]
requires-python = "==3.13.*"
readme = "README.md"
license = {text = "MIT"}


[project.optional-dependencies]
jupyter = [
    "gmpy2>=2.2.1",
    "ipykernel>=6.29.5",
    "matplotlib>=3.9.2",
    "mpmath[gmpy2]>=1.3.0",
    "nbformat>=5.10.4",
    "numpy>=2.1.2",
    "scipy>=1.14.1",
]

[tool.pdm.dev-dependencies]
dev = [
    "autopep8>=2.3.1",
    "flake8>=7.1.1",
    "mypy>=1.11.2",
    "pytest>=8.3.2",
    "pytest-cov>=5.0.0",
    "tox>=4.18.0",
    "tox-gh-actions>=3.2.0",
    "tox-pdm>=0.7.2",
]

[tool.pdm]
distribution = false

[tool.pdm.scripts]
create.shell = "pdm venv remove -y in-project; pdm install --check --no-editable"
clean.shell = "find . -type d -name __pycache__ -exec rm -fr {} \\;;for d in ${TO_DEL};do echo $d;rm -fr $d;done"
clean.env = { TO_DEL = "build .coverage coverage.xml log .mypy_cache .pdm-build pi_py.egg-info pi_ui/dist pi_wasm/build pi_wasm/.zig-cache pi_wasm/zig-out __pycache__ .pytest_cache .tox" }
clean.help = "Clean build artifacts"
envclean.shell = "for d in ${TO_DEL};do echo $d;rm -fr $d;done"
envclean.env = { TO_DEL = "pi_ui/node_modules .venv" }
envclean.help = "Clean environment"
allclean.composite = [ "clean", "envclean" ]
start = "python -m pi_py.pi_digits"
build.shell = "docker compose build"
compose.shell = "docker compose up"
up.composite = [ "build", "compose" ]
down.shell = "docker compose down"
gitignore.shell = "source ~/.local/.bashrc.d/gitignore.io; gi -s -- python,zig >.gitignore;echo '\n.pdm-python\n.zig-cache/' >>.gitignore"
gitignore.help = "generate .gitignore"

flake8.cmd = "flake8 pi_py/"
mypy.cmd = "mypy pi_py/"
test.cmd = "pytest"
testcov.cmd = "pytest --cov=pi_py --cov-report xml:coverage.xml --cov-report term"
testcov.help = "Produce test coverage xml and term reports"
tox.cmd = "tox"

[tool.autopep8]
max-doc-length = 140
max_line_length = 140

[tool.pytest.ini_options]
addopts = ""

[tool.mypy]
mypy_path = "pi_py/"
check_untyped_defs = true
disallow_any_generics = false # until Generics union types are supported
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
no_implicit_reexport = true

[tool.setuptools]
# for tox discovery
packages = ["pi_py"]
